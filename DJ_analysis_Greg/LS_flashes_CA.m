function R = LS_flashes_CA(data_group, params)
if nargin < 2
    binSize = 10;
else
    binSize = params.binSize;
end

datasets = aka.Dataset & data_group;
datasets_struct = fetch(datasets);
N_datasets = datasets.count;

R = table('Size',[N_datasets, 12], 'VariableNames', ...
    {'file_name', ...
    'dataset_name', ...
    'source_id', ...
    'pre_time_ms', ...
    'stim_time_ms', ...
    'tail_time_ms', ...
    'n_epochs', ...
    'spikes_mean', ...
    'spikes_sem', ...
    'psth_y', ...
    'psth_x', ...
    'baseline_rate_hz'...
    }, ...
    'VariableTypes', ...
    {'string', ...
    'string', ...
    'uint16', ...
    'uint16', ...
    'uint16', ...
    'uint16', ...
    'uint16', ...
    'double', ...
    'double', ...
    'cell', ...
    'cell', ...
    'double'...
    });

%assign UserData of table to be the table name
R.Properties.UserData = 'LS_flashes_CA';

%assign test descriptions for some of the variables 
R.Properties.VariableDescriptions = ...
    {'file name from symphony', ...
    'dataset name', ... 
    'source id used to identify the cell to which the dataset belongs', ...
    'time before stimulus onset (ms)', ...
    'stimulus presentation time (ms)', ...
    'time after stimulus offset (ms)', ...
    'how many trials', ...
    'spike count during and after flash, mean', ...
    'spike count during and after flash, standard error of the mean', ...
    'psth with 10 ms bins or other binning if specified in params', ...
    'x (time) values for psth (seconds)', ...
    'baseline firing rate (in pre time (Hz)'...
    };

for d=1:N_datasets
    tic;
    fprintf('Processing %d of %d, %s_sourceid%d:%s\n', d, N_datasets, datasets_struct(d).file_name, datasets_struct(d).source_id, datasets_struct(d).dataset_name);

    epochs_in_dataset_table = sln_symphony.DatasetEpoch * ...
        sln_symphony.ExperimentEpoch & ...
        datasets_struct(d);

    epochs_in_dataset = fetch(sln_symphony.DatasetEpoch * ...
        aka.BlockParams('LightStep') * aka.EpochParams('LightStep') & ...
        datasets_struct(d),'*');
    
    N_epochs = length(epochs_in_dataset);

    if N_epochs == 0
        error('No epochs in dataset: %s', datasets_struct(d).dataset_name);
    end

    %parameters to save for the whole dataset
    %rstar_mean = epochs_in_dataset(1).rstar_mean;
    pre_stim_tail = struct('pre_time', epochs_in_dataset(1).pre_time, ...
        'stim_time', epochs_in_dataset(1).stim_time, ...
        'tail_time', epochs_in_dataset(1).tail_time);
    
    pre_spikes = zeros(N_epochs,1);
    stim_spikes = zeros(N_epochs,1);
    tail_spikes = zeros(N_epochs,1);
    for i=1:N_epochs
        pre_spikes(i) = spikes_in_interval(epochs_in_dataset(i),pre_stim_tail,'pre');
        stim_spikes(i) = spikes_in_interval(epochs_in_dataset(i),pre_stim_tail,'stim');
        tail_spikes(i) = spikes_in_interval(epochs_in_dataset(i),pre_stim_tail,'tail');
    end
    [psth_x, psth_y] = psth_for_epochs(epochs_in_dataset_table & epochs_in_dataset, binSize);
    
    spikes = stim_spikes + tail_spikes;
    spikes_mean = mean(spikes);
    spikes_sem = std(spikes)./sqrt(N_epochs-1);

    baseline_rate = mean(pre_spikes) / (pre_stim_tail.pre_time / 1E3); %baseline rate in Hz

    %set table variables
    R.file_name(d) = datasets_struct(d).file_name;
    R.dataset_name(d) = datasets_struct(d).dataset_name;
    R.source_id(d) = datasets_struct(d).source_id;
    R.pre_time_ms(d) = pre_stim_tail.pre_time;
    R.stim_time_ms(d) = pre_stim_tail.stim_time;
    R.tail_time_ms(d) = pre_stim_tail.tail_time;
    R.n_epochs(d) = N_epochs;
    R.spikes_mean(d) = spikes_mean;
    R.spikes_sem(d) = spikes_sem;
    R.psth_y(d) = {psth_y};
    R.psth_x(d) = {psth_x};
    R.baseline_rate_hz(d) = baseline_rate;
    fprintf('Elapsed time = %d seconds\n', round(toc));
end


