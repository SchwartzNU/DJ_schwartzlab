function R = MultiPulse_activation(data_group, params)

datasets = aka.Dataset & data_group;
datasets_struct = fetch(datasets);
N_datasets = datasets.count;

%variable names must be lowercase
R = table('Size',[N_datasets, 18], 'VariableNames', ...
    {'file_name', ...
    'dataset_name', ...
    'source_id', ...
    'inj_current', ...
    'n_epochs_per_current', ...
    'vrest', ...
    'vmax', ...
    'vmin', ...
    'vmax_norm', ...
    'vmin_norm', ...
    'vsteady', ...
    'tmax', ...
    'tmin', ...
    'mean_traces', ...
    'sample_rate' ...
    'pre_time_ms', ...
    'stim1_time_ms' ...
    'stim2_time_ms' ...
    }, ...
    'VariableTypes', ...
    {'string', ...
    'string', ...
    'uint16', ...
    'cell', ...
    'cell', ...
    'double', ...
    'cell', ...
    'cell', ...
    'cell', ...
    'cell', ...
    'cell', ...
    'cell', ...
    'cell', ...
    'cell', ...
    'double', ...
    'uint16', ...
    'uint16', ...
    'uint16' ...
    });

%assign UserData of table to be the table name
R.Properties.UserData = 'MultiPulse_activation';

%assign test descriptions for some of the variables 
R.Properties.VariableDescriptions = ...
    {'file name from symphony', ...
    'dataset name', ... 
    'source id used to identify the cell to which the dataset belongs', ...
    'vector of current injection amplitudes (pA)', ...
    'vector with how many trials for each injection size', ...
    'resting potential (mV)', ...
    'maximum positive deflection above steady Vm during positive current (mV)', ...
    'minimum negative deflection from steady Vm after positive deflection (mV)', ...
    'Vmax normalized for activation curve', ...
    'Vmin normalized for activation curve', ...
    'steady state deflection during last 50 ms of current (mV)', ...
    'time of vmax', ...
    'time of vmin', ...
    'waveforms of mean traces (mV)', ...
    'samples per second', ...
    'pre time (ms)', ...
    'stim1 time (ms)',...
    'stim2 time (ms)'...
    };

for d=1:N_datasets
    tic;
    fprintf('Processing %d of %d, %s_sourceid%d:%s\n', d, N_datasets, datasets_struct(d).file_name, datasets_struct(d).source_id, datasets_struct(d).dataset_name);

    epochs_in_dataset = fetch(sln_symphony.DatasetEpoch * ...
        sln_symphony.ExperimentChannel * ...
        sln_symphony.ExperimentEpochChannel * ...
        sln_symphony.ExperimentProtocolMultiPulseV1BlockParameters * ...
        sln_symphony.ExperimentProtocolMultiPulseV1EpochParameters & ...
        datasets_struct(d),'*');
    N_epochs = length(epochs_in_dataset);

    if N_epochs == 0
        error('No epochs in dataset: %s', datasets_struct(d).dataset_name);
    end

    %parameters to save for the whole dataset
    sample_rate = epochs_in_dataset(1).sample_rate;
    pre_stim_tail = struct('pre_time', epochs_in_dataset(1).pre_time, ...
        'stim1_time', epochs_in_dataset(1).stim_1_time, ...
        'stim2_time', epochs_in_dataset(1).stim_2_time, ...
        'tail_time', epochs_in_dataset(1).tail_time);
    pre_samples = sample_rate * (pre_stim_tail.pre_time / 1E3);
    stim1_samples = sample_rate * (pre_stim_tail.stim1_time / 1E3);
    stim2_samples = sample_rate * (pre_stim_tail.stim2_time / 1E3);
    tail_samples = sample_rate * (pre_stim_tail.tail_time / 1E3);
    total_samples = pre_samples + stim1_samples + stim2_samples + tail_samples;
    ss_samples = 50E-3 * sample_rate;

    all_currents = round([epochs_in_dataset.pulse_1_curr]);
    currents  = sort(unique(all_currents));
    N_currents = length(currents);

    N_epochs_per_current = zeros(N_currents,1);
    vmax = zeros(N_currents,1);
    vmin = zeros(N_currents,1);
    vsteady = zeros(N_currents,1);
    vend = zeros(N_currents,1);
    tmax = zeros(N_currents,1);
    tmin = zeros(N_currents,1);
    vrest_vector = zeros(N_currents,1);
    mean_traces = zeros(N_currents, total_samples);

    for s=1:N_currents
        ind = find(all_currents == currents(s));
        N_epochs_per_current(s) = length(ind);
        trace = mean(reshape([epochs_in_dataset(ind).raw_data], [], length(ind)), 2)';
        mean_traces(s,:) = trace;
        vrest_vector(s) = mean(trace(1:pre_samples));
       
        vsteady(s) = mean(trace(pre_samples+stim1_samples-ss_samples:pre_samples+stim1_samples));
        vend(s) = mean(trace(pre_samples+stim1_samples+stim2_samples-ss_samples:pre_samples+stim1_samples+stim2_samples));

        [vmax(s), t] = max(trace(pre_samples+stim1_samples+1:pre_samples+stim1_samples+stim2_samples));
        vmax(s) = vmax(s) - vend(s);
        tmax(s) = 1E3 * t / sample_rate;

        %min after max
        [vmin(s), tmin] = min(trace(pre_samples+stim1_samples+t:pre_samples+stim1_samples+stim2_samples));
        tmin = tmin+t;
        vmin(s) = - (vmin(s) - vend(s));
        tmin(s) = 1E3 * tmin / sample_rate;       
    end

    vrest = mean(vrest_vector);

    %set table variables
    R.file_name(d) = datasets_struct(d).file_name;
    R.dataset_name(d) = datasets_struct(d).dataset_name;
    R.source_id(d) = datasets_struct(d).source_id;
    R.inj_current(d) = {currents'};
    R.pre_time_ms(d) = pre_stim_tail.pre_time;
    R.stim1_time_ms(d) = pre_stim_tail.stim1_time;
    R.stim2_time_ms(d) = pre_stim_tail.stim2_time;
    R.n_epochs_per_current(d) = {N_epochs_per_current};
    R.vrest(d) = vrest;
    R.vsteady(d) = {vsteady};
    R.vmax(d) = {vmax};
    R.vmax_norm(d) =  {vmax ./ max(vmax)};
    R.tmax(d) = {tmax};
    R.vmin(d) = {vmin};
    R.vmin_norm(d) = {vmin ./ max(vmin)};
    R.tmin(d) = {tmin};
    R.mean_traces(d) = {mean_traces};
    R.sample_rate(d) = sample_rate;

    fprintf('Elapsed time = %d seconds\n', round(toc));

end
