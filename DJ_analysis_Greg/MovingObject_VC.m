function R = MovingObject_VC(data_group, params)

datasets = aka.Dataset & data_group;
datasets_struct = fetch(datasets);
N_datasets = datasets.count;

R = table('Size',[N_datasets, 15], 'VariableNames', ...
    {'file_name', ...
    'dataset_name', ...
    'source_id', ...
    'speeds', ...
    'directions', ...
    'speed_by_condition', ...
    'direction_by_condition', ...
    'peak', ...
    'peak_time', ...
    'peak_time_from_center', ...
    'n_epochs_per_condition', ...
    'mean_trace_by_condition'...
    'x_by_condition', ...
    'x_from_center_by_condition',...
    'holding_current_mean'...
    }, ...
    'VariableTypes', ...
    {'string', ...
    'string', ...
    'uint16', ...
    'cell', ...
    'cell', ...
    'cell', ...
    'cell', ...
    'cell', ...
    'cell', ...
    'cell', ...
    'cell', ...
    'cell', ... %actually struct
    'cell', ... %actually struct
    'cell', ...   %actually struct
    'double'...
    });

%assign UserData of table to be the table name
R.Properties.UserData = 'MovingObject_VC';

%assign test descriptions for some of the variables
R.Properties.VariableDescriptions = ...
    {'file name from symphony', ...
    'dataset name', ...
    'source id used to identify the cell to which the dataset belongs', ...
    'set of speeds (microns / sec)', ...
    'set of directions (degrees)', ...
    'speed for each condition', ...
    'direction for each condition', ...
    'peak current rate (pA)', ...
    'time of peak current from start of epoch (s)', ...
    'time of peak current relative to time object is in screen center (s)', ...
    'number of epochs in each condition', ...
    'struct of time axis for each condition', ...
    'struct of mean trace for each condition', ...
    'struct of time axis recentered on the time the objet is in screen center', ...
    'mean holding current across all conditions (pA)'...
    };

for d=1:N_datasets
    tic;
    fprintf('Processing %d of %d, %s_sourceid%d:%s\n', d, N_datasets, datasets_struct(d).file_name, datasets_struct(d).source_id, datasets_struct(d).dataset_name);

    epochs_in_dataset = sln_symphony.DatasetEpoch * ...
        sln_symphony.ExperimentEpoch * ...
        sln_symphony.ExperimentChannel * ...
        sln_symphony.ExperimentEpochChannel * ...
        sln_symphony.ExperimentProtocolMovingObjectV1BlockParameters * ...
        sln_symphony.ExperimentProtocolMovingObjectV1EpochParameters & ...
        datasets_struct(d);
    epochs_in_dataset_struct = fetch(epochs_in_dataset,'*');
    %ep_ids = fetch(epochs_in_dataset);

    N_epochs = length(epochs_in_dataset_struct);

    if N_epochs == 0
        error('No epochs in dataset: %s', datasets_struct(d).dataset_name);
    end

    sample_rate = epochs_in_dataset_struct(1).sample_rate;
    pre_samples = sample_rate * (epochs_in_dataset_struct(1).pre_time / 1E3);

    all_speeds = round([epochs_in_dataset_struct.speed]);
    speeds = sort(unique(all_speeds));
    N_speeds = length(speeds);

    all_directions = round([epochs_in_dataset_struct.direction]);
    directions = sort(unique(all_directions));
    N_directions = length(directions);

    Nconditions = N_speeds * N_directions;

    N_epochs_per_condition = zeros(Nconditions,1);
    speed_by_condition = zeros(Nconditions,1);
    direction_by_condition = zeros(Nconditions,1);
    peak = zeros(Nconditions,1);
    peak_time = zeros(Nconditions,1);
    peak_time_from_center = zeros(Nconditions,1);
    center_time_ms = zeros(Nconditions,1);
    duration_ms = zeros(Nconditions,1);
    holding_current = zeros(Nconditions,1);

    c = 1;
    for s=1:N_speeds
        for dir = 1:N_directions
            condition_name_y = sprintf('trace_speed_%d_direction_%d',speeds(s),directions(dir));
            condition_name_x = sprintf('X_speed_%d_direction_%d',speeds(s),directions(dir));
            condition_name_x_centered = sprintf('Xcentered_speed_%d_direction_%d',speeds(s),directions(dir));
            speed_by_condition(c) = speeds(s);
            direction_by_condition(c) = directions(dir);
            ind = find(all_speeds == speeds(s) & all_directions == directions(dir));

            N_epochs_per_condition(c) = length(ind);
            sample_ep = epochs_in_dataset_struct(ind(1));
            duration_ms(c) = double(sample_ep.epoch_duration);
            center_time_ms(c) = duration_ms(c) / 2 + double(sample_ep.center_time_shift);

            mean_trace = mean(reshape([epochs_in_dataset_struct(ind).raw_data], [], length(ind)), 2)';
            holding_current(c) = mean(mean_trace(1:pre_samples));

            mean_trace_baseline_subtracted = mean_trace - holding_current(c);
            [peak_pos, ind_pos] = max(mean_trace_baseline_subtracted);
            [peak_neg, ind_neg] = min(mean_trace_baseline_subtracted);
            if abs(peak_pos) > abs(peak_neg)
                peak_val = peak_pos;
                ind = ind_pos;
            else
                peak_val = peak_neg;
                ind = ind_neg;
            end
            
            L = length(mean_trace);
            xvals = ((0:L-1) - pre_samples) / sample_rate; 

            peak(c) = peak_val;
            peak_time(c) = xvals(ind);

            x_from_center = xvals - (center_time_ms(c) / 1E3);
            peak_time_from_center(c) = x_from_center(ind);

            x_by_condition.(condition_name_x) = xvals;
            mean_trace_by_condition.(condition_name_y) = mean_trace;   
            x_from_center_by_condition.(condition_name_x_centered) = x_from_center;
            c=c+1;
        end
    end

    %set table variables
    R.mean_holding_current(d) = mean(holding_current);
    R.file_name(d) = datasets_struct(d).file_name;
    R.dataset_name(d) = datasets_struct(d).dataset_name;
    R.source_id(d) = datasets_struct(d).source_id;
    R.speeds(d) = {speeds'};
    R.directions(d) = {directions'};
    R.speed_by_condition(d) = {speed_by_condition};
    R.direction_by_condition(d) = {direction_by_condition};
    R.peak(d) = {peak};
    R.peak_time(d) = {peak_time};
    R.peak_time_from_center(d) = {peak_time_from_center};
    R.n_epochs_per_condition(d) = {N_epochs_per_condition};
    R.x_by_condition(d) = {x_by_condition};
    R.mean_trace_by_condition(d) = {mean_trace_by_condition};
    R.x_from_center_by_condition(d) = {x_from_center_by_condition};

    fprintf('Elapsed time = %d seconds\n', round(toc));
end


