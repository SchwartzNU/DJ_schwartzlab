function [status, refresh_response, access_response] = example_google_calendar_integration(client_id, client_secret, calendar_name)
% (1) Get client id and client secret:
%   Navigate to google cloud console (https://console.cloud.google.com/)
%   In the navigation menu, select: "APIs & Services" > "Credentials"
%   Select the desired app under "OAuth 2.0 Client IDs" (e.g., "Animal
% Interface V2")
%   The client id and secret should be displayed. You may need to reset the
% secret using the menu button at the top of the screen

% (2) Get the authorization code from the user
% Note: for security reasons, google requires a web redirect or similar for
% this
web(sprintf('https://accounts.google.com/o/oauth2/v2/auth?scope=https://www.googleapis.com/auth/calendar&redirect_uri=urn:ietf:wg:oauth:2.0:oob&client_id=%s&response_type=code&access_type=offline',client_id));
auth_code = input('Enter the authorization code: ','s');

% (3) Get the refresh token. This is a "long-term" token that can be used
% for repeated access and should be saved.
refresh_response = webwrite(...
    'https://oauth2.googleapis.com/token',...
    'grant_type','authorization_code',...
    'client_id',client_id,...
    'client_secret',client_secret,...
    'code',auth_code,...
    'redirect_uri','urn:ietf:wg:oauth:2.0:oob'...
    );

% (4) Get the access token. This is a "short-term" token that will expire
% between sessions.
access_response = webwrite(...
    'https://oauth2.googleapis.com/token',...
    'grant_type','refresh_token',...
    'client_id',client_id,...
    'client_secret',client_secret,...
    'refresh_token',refresh_response.refresh_token,...
    'redirect_uri','urn:ietf:wg:oauth:2.0:oob'...
    );

% (5) With the access token, we can now edit the user's calendar
body = struct();
body.start = struct('dateTime',datestr(datetime('now'),'yyyy-mm-ddTHH:MM:ss'),'timeZone','America/Chicago'); %required
body.end = struct('dateTime',datestr(datetime('now')+hours(2),'yyyy-mm-ddTHH:MM:ss'),'timeZone','America/Chicago'); %required
body.summary = 'Test event automatically added from Matlab'; %optional title
% additional options: https://developers.google.com/calendar/v3/reference/events/insert#request-body

request = matlab.net.http.RequestMessage(...
    matlab.net.http.RequestMethod.POST,...
    matlab.net.http.HeaderField('Authorization',sprintf('Bearer %s',access_response.access_token),'MediaType','application/json'),...
    body...
);

status = request.send(sprintf('https://www.googleapis.com/calendar/v3/calendars/%s/events', calendar_name)); %e.g., schwartzlabnu@gmail.com
%Note: we can add 'query parameters' by appending to the url
%e.g. .../events?maxAttendees=3&sendUpdates=false
%see https://developers.google.com/calendar/v3/reference/events/insert#parameters

end