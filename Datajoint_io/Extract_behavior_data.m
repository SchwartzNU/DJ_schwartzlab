behavior_data_all = sl_behavior.TrackingData2D * ...
    sln_animal.Animal * ...
    sln_animal.GenotypeString * ...
    sln_animal.AnimalEvent * ...
    sl_behavior.SocialBehaviorExperimentType * ...
    proj(sl_behavior.TestAnimalType,'description->description_animal_type') * ...
    sln_animal.SocialBehaviorSession & ...
    'purpose NOT LIKE "%test%"';

% %behavior_data_stimuli = behavior_data_all * ...
%     sln_animal.SocialBehaviorSessionStimulus * ...
%     proj(sl_behavior.VisualStimulusType,'description->description_visual_stim','*');
% 
% %behavior_data_with_gaze = behavior_data_all * ...
%     sl_behavior.GazeData2D * ...
%     sl_behavior.TopCameraCalibration;

%annotations = sl_behavior.Annotation * sl_behavior.AnnotationType;

%% Get matching ones and extract them
ids = unique(fetchn(behavior_data_all,'event_id'));

for i=1:length(ids)
    i
    q = behavior_data_all & sprintf('event_id=%d',ids(i));
    data_for_session.session_info = fetch(q,'*');
    stims = sln_animal.SocialBehaviorSessionStimulus * ...
        proj(sl_behavior.VisualStimulusType,'description->description_visual_stim','*') & ...
        sprintf('event_id=%d',ids(i));
    data_for_session.stimuli = fetch(stims,'*');
    
    gaze_data =  sl_behavior.GazeData2D * ...
            sl_behavior.TopCameraCalibration & ...
            sprintf('event_id=%d',ids(i));
    if gaze_data.exists
        data_for_session.gaze_data = fetch(gaze_data,'*');
    end

    nose_data =  sl_behavior.NoseData2D & ... 
            sprintf('event_id=%d',ids(i));
    if nose_data.exists
        data_for_session.nose_data = fetch(nose_data,'*');
    end
    
    annotations = sl_behavior.Annotation * ...
        sl_behavior.AnnotationType & ...
        sprintf('event_id=%d',ids(i));    
    if annotations.exists
        data_for_session.annotations = annotations;
    end   

    save(sprintf('Session_%d',ids(i)), 'data_for_session');
    exportStructToHDF5(data_for_session,sprintf('Session_%d.h5',ids(i)),'/');
end



